@page "/index-simple"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="container-fluid" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 2rem;">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 text-white mb-4">
                <i class="fas fa-eye me-3"></i>Real-Time Intelligence Dashboard
            </h1>
        </div>
    </div>

    <!-- Status Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-success" style="border-radius: 15px;">
                <div class="card-body text-center">
                    <i class="fas fa-desktop fa-2x text-success mb-2"></i>
                    <h5 class="card-title">Capture d'écran</h5>
                    <span class="badge @(systemRunning ? "bg-success" : "bg-secondary")">
                        @(systemRunning ? "Actif" : "Arrêté")
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-info" style="border-radius: 15px;">
                <div class="card-body text-center">
                    <i class="fas fa-microphone fa-2x text-info mb-2"></i>
                    <h5 class="card-title">Microphone</h5>
                    <span class="badge @(systemRunning ? "bg-success" : "bg-secondary")">
                        @(systemRunning ? "Actif" : "Arrêté")
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-warning" style="border-radius: 15px;">
                <div class="card-body text-center">
                    <i class="fas fa-font fa-2x text-warning mb-2"></i>
                    <h5 class="card-title">OCR</h5>
                    <span class="badge @(systemRunning ? "bg-success" : "bg-secondary")">
                        @(systemRunning ? "Actif" : "Arrêté")
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-primary" style="border-radius: 15px;">
                <div class="card-body text-center">
                    <i class="fas fa-brain fa-2x text-primary mb-2"></i>
                    <h5 class="card-title">IA</h5>
                    <span class="badge @(systemRunning ? "bg-success" : "bg-secondary")">
                        @(systemRunning ? "Actif" : "Arrêté")
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- Control Panel -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card" style="border-radius: 15px;">
                <div class="card-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px 15px 0 0;">
                    <h4><i class="fas fa-cogs me-2"></i>Panneau de Contrôle</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <button class="btn @(systemRunning ? "btn-danger" : "btn-success") btn-lg w-100 mb-3"
                                    @onclick="ToggleSystem" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <i class="fas fa-spinner fa-spin me-2"></i>
                                    <span>Traitement...</span>
                                }
                                else
                                {
                                    <i class="fas @(systemRunning ? "fa-stop" : "fa-play") me-2"></i>
                                    @(systemRunning ? "Arrêter le système" : "Démarrer le système")
                                }
                            </button>
                        </div>
                        <div class="col-md-6">
                            <button class="btn btn-outline-info btn-lg w-100 mb-3"
                                    @onclick="RunDiagnostics" disabled="@isLoading">
                                <i class="fas fa-stethoscope me-2"></i>Diagnostic Système
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Activity Log -->
    <div class="row">
        <div class="col-12">
            <div class="card" style="border-radius: 15px;">
                <div class="card-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px 15px 0 0;">
                    <h4><i class="fas fa-list me-2"></i>Journal d'Activité</h4>
                </div>
                <div class="card-body">
                    <div class="log-container" style="height: 300px; overflow-y: auto; background: #f8f9fa; border-radius: 10px; padding: 1rem;">
                        @if (activities.Count > 0)
                        {
                            @foreach (var activity in activities)
                            {
                                <div class="activity-item d-flex align-items-start mb-2 p-2 rounded" style="background: white; border-left: 4px solid #667eea;">
                                    <i class="@activity.Icon me-2 mt-1"></i>
                                    <div class="flex-grow-1">
                                        <div class="fw-medium">@activity.Message</div>
                                        <small class="text-muted">@activity.Timestamp.ToString("HH:mm:ss")</small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <i class="fas fa-clock fa-2x mb-2"></i>
                                <p>En attente d'activités...</p>
                                <small>Cliquez sur "Démarrer le système" pour commencer</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private bool systemRunning = false;
    private List<(string Icon, string Message, DateTime Timestamp)> activities = new();

    protected override async Task OnInitializedAsync()
    {
        AddActivity("fas fa-power-off text-success", "Système d'intelligence initialisé");
        await Task.Delay(1);
    }

    private async Task ToggleSystem()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            await Task.Delay(1000);
            
            if (systemRunning)
            {
                systemRunning = false;
                AddActivity("fas fa-stop text-danger", "Système arrêté");
            }
            else
            {
                systemRunning = true;
                AddActivity("fas fa-play text-success", "Système démarré");
                AddActivity("fas fa-desktop text-info", "Module de capture d'écran activé");
                AddActivity("fas fa-microphone text-info", "Module microphone activé");
                AddActivity("fas fa-font text-info", "Module OCR activé");
                AddActivity("fas fa-brain text-info", "Module IA activé");
            }
        }
        catch (Exception ex)
        {
            AddActivity("fas fa-exclamation-triangle text-danger", $"Erreur: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RunDiagnostics()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            AddActivity("fas fa-stethoscope text-primary", "Démarrage du diagnostic...");
            await Task.Delay(500);
            
            AddActivity("fas fa-check text-success", "✅ Capture d'écran - OK");
            await Task.Delay(300);
            
            AddActivity("fas fa-check text-success", "✅ Microphone - OK");
            await Task.Delay(300);
            
            AddActivity("fas fa-check text-success", "✅ OCR - OK");
            await Task.Delay(300);
            
            AddActivity("fas fa-check text-success", "✅ IA - OK");
            await Task.Delay(300);
            
            AddActivity("fas fa-shield-alt text-success", "Diagnostic terminé - Tous les modules sont opérationnels");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddActivity(string icon, string message)
    {
        activities.Insert(0, (icon, message, DateTime.Now));
        if (activities.Count > 50) activities.RemoveAt(50);
        StateHasChanged();
    }
}
